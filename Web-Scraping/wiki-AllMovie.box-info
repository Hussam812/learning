{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cd928075",
   "metadata": {},
   "source": [
    "# Get info box for all movies\n",
    "Import som libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "837bffb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup as bs\n",
    "import requests as req\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e70d5714",
   "metadata": {},
   "outputs": [],
   "source": [
    "# making function to take values from li tag and place it in list and replace \\xa0\n",
    "def get_content(row_data):\n",
    "    if row_data.find('li'):\n",
    "        return [li.get_text(' ', strip = True).replace('\\xa0', ' ') for li in row_data.find('li')]\n",
    "    else:\n",
    "        return row_data.get_text(' ', strip = True).replace('\\xa0', ' ')\n",
    "    \n",
    "    \n",
    "def get_info_box(url):\n",
    "    res = req.get(url)\n",
    "    soup = bs(res.content, 'html.parser')\n",
    "    \n",
    "    # box incloded in tbody tag\n",
    "    box = soup.find('tbody')\n",
    "\n",
    "    # row included in tr tag\n",
    "    box_rows = box.find_all('tr')\n",
    "    \n",
    "    # creating empty dictionary & iritrate theough rows\n",
    "    movie_info = {}\n",
    "\n",
    "    for index, row in enumerate(box_rows):\n",
    "        if index == 0:\n",
    "            movie_info['title'] = row.get_text(' ', strip = True)\n",
    "        elif index == 1:\n",
    "                continue\n",
    "        else :\n",
    "            key = row.find('th').get_text(' ', strip = True)\n",
    "            value = get_content(row.find('td'))\n",
    "            movie_info[key] = value\n",
    "    return movie_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "349cd39f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Zorro the Avenger\n",
      "'NoneType' object has no attribute 'find'\n",
      "The Sign of Zorro\n",
      "'NoneType' object has no attribute 'find'\n",
      "Nikki: Wild Dog of the North\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "The Hunchback of Notre Dame II\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Spirited Away\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Howl's Moving Castle\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "The Nightmare Before Christmas 3D\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Lilly the Witch: The Dragon and the Magic Book\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Ponyo\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Tales from Earthsea\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Anaganaga O Dheerudu\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Tini: The Movie\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Born in China\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "The Beatles: Get Back â€“ The Rooftop Concert\n",
      "'NoneType' object has no attribute 'find'\n",
      "Elemental\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "61\n",
      "'NoneType' object has no attribute 'find'\n",
      "All Night Long\n",
      "'NoneType' object has no attribute 'find'\n",
      "Big Thunder Mountain Railroad\n",
      "'NoneType' object has no attribute 'find'\n",
      "Keeper of the Lost Cities\n",
      "'NoneType' object has no attribute 'find_all'\n",
      "Shrunk\n",
      "'NoneType' object has no attribute 'find'\n",
      "Tom Sawyer\n",
      "'NoneType' object has no attribute 'find'\n",
      "Tower of Terror\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "Tron: Ares\n",
      "'NoneType' object has no attribute 'get_text'\n",
      "FC Barcelona\n",
      "'NoneType' object has no attribute 'get_text'\n"
     ]
    }
   ],
   "source": [
    "# get HTML and stor in res\n",
    "res = req.get('https://en.wikipedia.org/wiki/List_of_Walt_Disney_Pictures_films')\n",
    "\n",
    "# convert HTML into BEautifulSoup object\n",
    "soup = bs(res.content, 'html.parser')\n",
    "\n",
    "movies = soup.select(\".wikitable.sortable i a\")\n",
    "base_path  = 'https://en.wikipedia.org/'\n",
    "movie_info_list = [] \n",
    "for index, movie in enumerate(movies):\n",
    "    try:\n",
    "        title = movie['title']\n",
    "        relative_path = movie['href']\n",
    "        full_path = base_path + relative_path\n",
    "        movie_info_list.append(get_info_box(full_path))\n",
    "    except Exception as e:\n",
    "        print(movie.get_text())\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fe1e3d6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "517"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movie_info_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca34fb73",
   "metadata": {},
   "source": [
    "### Save / Reload data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c10c9c42",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "def save_data(title, data):\n",
    "    with open('C:/Users/Mansi/Desktop/projects/projects/Web-Scraping/title', 'w',encoding='utf-8') as f:\n",
    "        json.dump(data, f, ensure_ascii= False, indent=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "61ac017f",
   "metadata": {},
   "outputs": [],
   "source": [
    "save_data('disney_data.json', movie_info_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6036c820",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_data(title):\n",
    "    with open(title, encoding='utf-8') as f:\n",
    "        return json.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2ba331dd",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (Temp/ipykernel_7064/1023875821.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\Mansi\\AppData\\Local\\Temp/ipykernel_7064/1023875821.py\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    load_data(C:/Users/Mansi/Desktop/projects/projects/Web-Scraping/disney_data)\u001b[0m\n\u001b[1;37m               ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "load_data(C://Users//Mansi/Desktop/projects/projects/Web-Scraping/disney_data.json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0548f4c9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
